{"version":3,"sources":["components/MyNavbar/index.js","components/MyNavbar/MyNavbar.js","pages/LandingPage/index.js","pages/LandingPage/LandingPage.js","components/Authentication/SignUp/index.js","components/Authentication/SignUp/SignUpForm.js","pages/SignUpPage/index.js","pages/SignUpPage/SignUpPage.js","components/Authentication/LogIn/index.js","components/Authentication/LogIn/LogInForm.js","pages/LogInPage/index.js","pages/LogInPage/LogInPage.js","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","props","useState","Button","Navbar","className","collapseOnSelect","bg","variant","Brand","href","Toggle","aria-controls","Nav","style","display","showBtn","to","size","LandingPage","SignUpForm","termsAgreement","setTermsAgreement","htmlFor","id","placeholder","checked","onChange","theme","SignUpPage","SignUp","LogInForm","LogInPage","LogIn","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e89a4b0.chunk.js","sourcesContent":["import MyNavbar from \"./MyNavbar\";\r\n\r\nexport default MyNavbar;","import React, { useState } from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport './MyNavbar.css';\r\n\r\nexport default function MyNavbar(props) {  \r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  const logOutBtn = (\r\n      <Link to=\"/logout\">\r\n          <Button className=\"mynavbar-btn\" variant=\"outline-secondary\" size=\"sm\">log out</Button>\r\n      </Link>\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"mynavbar\" collapseOnSelect bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"/\">United Pantry</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Nav className=\"mr-auto\">\r\n            {/* <Nav.Link className=\"mobile-login\" href=\"#features\">login</Nav.Link>\r\n            <Nav.Link className=\"mobile-login\" href=\"#pricing\">signup</Nav.Link>\r\n            */}\r\n        </Nav>\r\n\r\n        <Nav style={{display: (props.showBtn === \"true\") ? \"\" : \"none\"}}>\r\n          <Link to=\"/login\">\r\n            <Button className=\"mynavbar-btn\" variant=\"outline-secondary\" size=\"sm\">login</Button>\r\n          </Link>\r\n            {/* <Nav.Link eventKey={2} href=\"#memes\">\r\n              Dank memes\r\n            </Nav.Link> */}\r\n          <Link to=\"/signup\">\r\n            <Button className=\"mynavbar-btn\" variant=\"outline-secondary\" size=\"sm\">sign up</Button>\r\n          </Link>\r\n          <Link to=\"/logout\">\r\n            <Button className=\"mynavbar-btn\" variant=\"outline-secondary\" size=\"sm\">log out</Button>\r\n          </Link>\r\n        </Nav>\r\n      </Navbar>\r\n    </div>\r\n  )\r\n}","import LandingPage from './LandingPage';\r\n\r\nexport default LandingPage;","import React from 'react';\r\nimport \"./LandingPage.css\";\r\n\r\nexport default function LandingPage() {\r\n    return (\r\n        <div className=\"container\">\r\n            Home\r\n        </div>\r\n    )\r\n}\r\n","import SignUpForm from './SignUpForm';\r\n\r\nexport default SignUpForm;","import React from 'react';\r\nimport {useState} from 'react';\r\nimport {Form} from 'shards-react';\r\nimport {FormGroup} from 'shards-react';\r\nimport {FormInput} from 'shards-react';\r\nimport {FormCheckbox} from 'shards-react';\r\nimport {Button} from 'shards-react';\r\n\r\nimport GoogleLogin from 'react-google-login';\r\n\r\nimport '../FormContainer.css';\r\nimport './SignUpForm.css';\r\n\r\nexport default function SignUpForm() {\r\n    const [termsAgreement, setTermsAgreement] = useState(false);\r\n    const toggleTermsAgreement =()=> setTermsAgreement(!termsAgreement);\r\n\r\n    return (\r\n        <Form className=\"FormContainer\">\r\n            <div>\r\n                <h1>Sign Up</h1>\r\n            </div>\r\n            {/* <GoogleLogin\r\n                onClick={() => { console.log('Google button clicked') }}\r\n                />\r\n\r\n<div class=\"fb-login-button\" data-width=\"\" data-size=\"large\" data-button-type=\"continue_with\" data-auto-logout-link=\"false\" data-use-continue-as=\"false\"></div> */}\r\n            <div>\r\n\r\n                <div className=\"flex-container\">\r\n                    <FormGroup className=\"formGroup\">\r\n                        <label htmlFor=\"#firstname\">First Name</label>\r\n                        <FormInput id=\"firstname\" placeholder=\"\"/>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"formGroup\">\r\n                        <label htmlFor=\"#lastname\">Last Name</label>\r\n                        <FormInput id=\"lastname\" placeholder=\"\"/>\r\n                    </FormGroup>\r\n                </div>\r\n                \r\n                <FormGroup className=\"formGroup\">\r\n                    <label htmlFor=\"#username\">Username</label>\r\n                    <FormInput id=\"username\" placeholder=\"\"/>\r\n                </FormGroup>\r\n\r\n                <FormGroup className=\"formGroup\">\r\n                    <label htmlFor=\"#email\">Email</label>\r\n                    <FormInput id=\"email\" placeholder=\"\"/>\r\n                </FormGroup>\r\n\r\n                <FormGroup className=\"formGroup\">\r\n                    <label htmlFor=\"#phone\">Phone Number</label>\r\n                    <FormInput id=\"phone\" placeholder=\"\"/>\r\n                </FormGroup>\r\n\r\n                <FormGroup className=\"formGroup\">\r\n                    <label htmlFor=\"#password\">Password</label>\r\n                    <FormInput id=\"password\" placeholder=\"\"/>\r\n                </FormGroup>\r\n\r\n                <FormCheckbox className=\"formGroup\" checked={termsAgreement} onChange={toggleTermsAgreement}>\r\n                    I have read and agree to the Terms and Conditions and Privacy Policy\r\n                </FormCheckbox>\r\n\r\n                <Button className=\"auth-btn\" theme=\"success\">\r\n                    Sign Up\r\n                </Button>\r\n            </div>\r\n            \r\n        </Form>\r\n    )\r\n}\r\n","import SignUpPage from './SignUpPage';\r\n\r\nexport default SignUpPage;","import SignUp from '../../components/Authentication/SignUp';\r\n\r\nimport React from 'react'\r\n\r\nexport default function SignUpPage() {\r\n    return ( \r\n        <SignUp/>\r\n    )\r\n}\r\n","import LogInForm from './LogInForm';\r\n\r\nexport default LogInForm;","import React from 'react';\r\nimport {Form} from 'shards-react';\r\nimport {FormGroup} from 'shards-react';\r\nimport {FormInput} from 'shards-react';\r\nimport {FormCheckbox} from 'shards-react';\r\nimport {Button} from 'shards-react';\r\n\r\nimport GoogleLogin from 'react-google-login';\r\n\r\nexport default function LogInForm() {\r\n    return (\r\n        <Form className=\"FormContainer\">\r\n            <div>\r\n                <h1>Log In</h1>\r\n            </div>\r\n            {/* <GoogleLogin\r\n                onClick={() => { console.log('Google button clicked') }}\r\n                />\r\n\r\n<div className=\"fb-login-button\" data-width=\"\" data-size=\"large\" data-button-type=\"continue_with\" data-auto-logout-link=\"false\" data-use-continue-as=\"false\"></div> */}\r\n            <div>\r\n\r\n                <FormGroup className=\"formGroup\">\r\n                    <label htmlFor=\"#email\">Email</label>\r\n                    <FormInput id=\"email\" placeholder=\"\"/>\r\n                </FormGroup>\r\n\r\n                <FormGroup className=\"formGroup\">\r\n                    <label htmlFor=\"#password\">Password</label>\r\n                    <FormInput id=\"password\" placeholder=\"\"/>\r\n                </FormGroup>\r\n\r\n                <Button className=\"auth-btn\" theme=\"success\">\r\n                    Log In\r\n                </Button>\r\n            </div>\r\n            \r\n        </Form>\r\n    )\r\n}\r\n","import LogInPage from './LogInPage';\r\n\r\nexport default LogInPage;","import LogIn from '../../components/Authentication/LogIn';\r\n\r\nimport React from 'react'\r\n\r\nexport default function LogInPage() {\r\n    return (\r\n        <LogIn/>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport MyNavBar from './components/MyNavbar';\r\n\r\nimport LandingPage from './pages/LandingPage';\r\nimport SignUpPage from './pages/SignUpPage';\r\nimport LogInPage from './pages/LogInPage';\r\n\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport {Switch} from 'react-router-dom';\r\nimport {Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <MyNavBar showBtn=\"true\"/>\r\n        <Switch>\r\n          <Route path='/login'>\r\n            <LogInPage />\r\n          </Route>\r\n          <Route path=\"/signup\">\r\n            {/* TODO store showBtn state in redux */}\r\n            {/* <MyNavBar showBtn=\"false\"/> */}\r\n            < SignUpPage />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            {/* TODO store showBtn state in redux */}\r\n            {/* <MyNavBar showBtn=\"true\"/> */}\r\n            <LandingPage/>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}